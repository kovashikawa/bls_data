[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bls-data"
version = "0.1.0"
description = "A clean, modular Python toolkit for downloading, mapping and analysing U.S. Bureau of Labor Statistics (BLS) timeâ€‘series data"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "rafael"}
]
maintainers = [
    {name = "rafael"}
]
keywords = ["bls", "bureau-of-labor-statistics", "economics", "data", "api", "time-series", "cpi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Office/Business :: Financial",
    "Topic :: Database",
]
requires-python = ">=3.9"
dependencies = [
    "requests>=2.31.0",
    "pandas>=2.2.2",
    "python-dotenv>=1.0.1",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.29.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",
]
api = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "psycopg[binary]>=3.1.13",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
]

[project.urls]
Homepage = "https://github.com/kovashikawa/bls_data"
Repository = "https://github.com/kovashikawa/bls_data.git"
Issues = "https://github.com/kovashikawa/bls_data/issues"
Documentation = "https://github.com/kovashikawa/bls_data#readme"

[project.scripts]
bls-data = "data_extraction.main:main"
bls-setup-db = "setup_database:main"
bls-extract-cpi = "scripts.extract_all_cpi_us_city_avg:main"

[tool.hatch.build.targets.wheel]
packages = ["bls_logging", "cu_series", "data_extraction", "database"]

[tool.hatch.build.targets.sdist]
include = [
    "/bls_logging", 
    "/cu_series",
    "/data_extraction",
    "/database",
    "/scripts",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
    "/requirements.txt",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | logs
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["logs/*", "venv/*", ".venv/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "requests.*",
    "sqlalchemy.*",
    "alembic.*",
    "psycopg2.*",
    "asyncpg.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["bls_data", "bls_logging"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/logs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "logs",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors
    "E9",      # pycodestyle errors
    "F",       # pyflakes
    "W",       # pycodestyle warnings
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "UP",      # pyupgrade
    "I",       # isort
    "N",       # pep8-naming
    "Q",       # flake8-quotes
    "S",       # flake8-bandit
    "T",       # flake8-type-checking
    "TCH",     # flake8-type-checking
    "TID",     # flake8-tidy-imports
    "YTT",     # flake8-2020
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Allow the current module to be imported
    "TID252",
    # Ignore complexity
    "C901",
    # Allow print statements (useful for debugging)
    "T201",
    # Allow relative imports
    "TID252",
    # Allow unused arguments in functions that match a pattern
    "ARG001", "ARG002", "ARG003", "ARG004", "ARG005",
    # Allow long lines in some cases
    "E501",
    # Allow imports
    "E402",
    # Allow unused imports in __init__.py files
    "F401",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["bls_logging", "data_extraction", "database", "cu_series"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
